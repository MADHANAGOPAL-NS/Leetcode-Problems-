Question:

you are given an array of integers nums. Consider the following operation:
Delete the first two elements nums and define the score of the operation as the sum of these two elements.
You can perform this operation until nums contains fewer than two elements. Additionally, the same score must be achieved in all operations.

Return the maximum number of operations you can perform.

Example 1:

Input: nums = [3,2,1,4,5]

Output: 2

Explanation:

We can perform the first operation with the score 3 + 2 = 5. After this operation, nums = [1,4,5].
We can perform the second operation as its score is 4 + 1 = 5, the same as the previous operation. After this operation, nums = [5].
As there are fewer than two elements, we can't perform more operations.
Example 2:

Input: nums = [1,5,3,3,4,1,3,2,2,3]

Output: 2

Explanation:

We can perform the first operation with the score 1 + 5 = 6. After this operation, nums = [3,3,4,1,3,2,2,3].
We can perform the second operation as its score is 3 + 3 = 6, the same as the previous operation. After this operation, nums = [4,1,3,2,2,3].
We cannot perform the next operation as its score is 4 + 1 = 5, which is different from the previous scores.
Example 3:

Input: nums = [5,3]

Output: 1



Intution:

- Start with an empty list to hold accepted pair sums.
- Traverse the input list in steps of two to create element pairs.
- For each pair:
- Calculate the sum.
- If it's the first pair, accept it without checks.
- For all subsequent pairs, accept only if the sum matches the previous one.
- Stop immediately if a mismatch is found.
- Return the number of consistent pairs found.

Code(python):

Input:

nums = [3,2,1,4,5]
lst = []
curr_sum = 0
for i in range(0 , len(nums) , 2):
    if i+1 < len(nums):
        curr_sum = nums[i] + nums[i+1]
        if len(lst) == 0 or curr_sum == lst[-1]:
            lst.append(curr_sum)
        else:
            break
return len((lst))  
